package org.firstinspires.ftc.teamcode.a;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;

/**
 * Created by RuiyingGao on 11/16/16.
 */

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorController;
import com.qualcomm.robotcore.hardware.DcMotorSimple;

/**
 * Created by citruseel on Joshua Krinsky 2/3/17
 */
@Autonomous(name="Basic Linear Autonomous", group="Autonomous")

public class ARC_hailStorm2016_2017 extends LinearOpMode {
        /* Note:
     * When you extend OpMode, you must declare the methods init() and loop()
     */


    /**
     * Declaring electronics
     * This can be done with a separate class and can make creating code much easier / simpler.
     */
    private DcMotorController motorControllerP0;    // Motor Controller in port 0 of Core
    private DcMotorController motorControllerP1;    // Motor Controller in port 1 of Core

    private DcMotor motor1;                         // Motor 1: port 1 in Motor Controller 1
    private DcMotor motor2;                         // Motor 2: port 2 in Motor Controller 1
    private DcMotor motor3;                         // Motor 3: port 1 in Motor Controller 0
    private DcMotor motor4;                         // Motor 4: port 2 in Motor Controller 0

    /* Declaring variables */

    public void runOpMode() throws InterruptedException {
        /** Initializing and mapping electronics (motors, motor controllers, servos, etc.) */
        motorControllerP0 = hardwareMap.dcMotorController.get("MCP0");
        motorControllerP1 = hardwareMap.dcMotorController.get("MCP1");

        motor1 = hardwareMap.dcMotor.get("motorFrontR");
        motor2 = hardwareMap.dcMotor.get("motorFrontL");
        motor3 = hardwareMap.dcMotor.get("motorBack1");
        motor4 = hardwareMap.dcMotor.get("motorBack2");

        /**Setting channel modes
         *  When setting channel modes,  use the names that are declared to the motors. */
        motor1.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        motor2.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        motor3.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        motor4.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);

        motor1.setDirection(DcMotorSimple.Direction.REVERSE);
        motor4.setDirection(DcMotorSimple.Direction.REVERSE);

        waitForStart();

        MoveForward(1, 1690/*milliseconds*/);
        MoveLeft(1, 1690);
        MoveRight(1,1690);
        MoveBack(1,1690);


    }

    public void MoveForward(double power, long time) throws InterruptedException {
        motor1.setPower(power);         //left side motor foward
        motor2.setPower(power);         //right Side motor foward
        motor3.setPower(power);         //left side motor foward
        motor4.setPower(power);         //right Side motor foward
    }

    public void MoveLeft(double power, long time) throws InterruptedException {
        motor1.setPower(-power);        //left side motor reverse
        motor3.setPower(-power);        //left side motor reverse
        motor2.setPower(power);         //right Side motor foward
        motor4.setPower(power);         //right Side motor foward
    }

    public void MoveRight (double power, long time) throws InterruptedException  {
        motor2.setPower(-power);        //right Side motor reverse
        motor4.setPower(-power);        //right Side motor reverse
        motor1.setPower(power);         //left side motor foward
        motor3.setPower(power);         //left side motor foward
          
    }
    public void MoveBack (double power, long time) throws InterruptedException {
        motor1.setPower(-power);           //left side motor reverse 
        motor2.setPower(-power);           //right Side motor reverse
        motor3.setPower(-power);           //left side motor reverse
        motor4.setPower(-power);           //right Side motor reverse
    }
}


}
